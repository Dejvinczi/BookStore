name: 'bookstore-dev'

services:
  api:
    build:
      context: api
      dockerfile: Dockerfile
      target: development
    entrypoint: ['entrypoint-development.sh']
    environment:
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_USER_PASSWORD=${DATABASE_USER_PASSWORD}
    ports:
      - '8000:8000'
      - '5678:5678'
    volumes:
      - ./api/config:/api/config
      - ./api/apps:/api/apps
      - ./api/manage.py:/api/manage.py
      - ./api/requirements/base.txt:/api/requirements/base.txt
      - ./api/requirements/development.txt:/api/requirements/development.txt
      - ./api/pyproject.toml:/api/pyproject.toml
      - ./api/conftest.py:/api/conftest.py
      - logs:/api/logs
      - static:/api/static
      - media:/api/media
    depends_on:
      - db

  worker:
    build:
      context: api
      dockerfile: Dockerfile
      target: development
    entrypoint: ['entrypoint-celery-worker.sh']
    volumes:
      - ./api/config:/api/config
      - ./api/apps:/api/apps
      - ./api/manage.py:/api/manage.py
      - ./api/requirements/base.txt:/api/requirements/base.txt
      - ./api/requirements/development.txt:/api/requirements/development.txt
      - ./api/pyproject.toml:/api/pyproject.toml
      - ./api/conftest.py:/api/conftest.py
      - logs:/api/logs
      - static:/api/static
      - media:/api/media
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_USER_PASSWORD=${DATABASE_USER_PASSWORD}
    depends_on:
      - api
      - redis

  redis:
    image: redis:7.4-alpine

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_USER_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data

  app:
    build:
      context: app
      dockerfile: Dockerfile
      target: development
    ports:
      - '3000:3000'
    volumes:
      - /app/node_modules
      - /app/.next
      - ./app:/app
    environment:
      - NEXT_PUBLIC_API_PROTOCOL=${NEXT_PUBLIC_API_PROTOCOL}
      - NEXT_PUBLIC_API_HOST=${NEXT_PUBLIC_API_HOST}
      - NEXT_PUBLIC_API_PORT=${NEXT_PUBLIC_API_PORT}
    depends_on:
      - api

volumes:
  logs:
  static:
  media:
  db-data:
