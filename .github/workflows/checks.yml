name: BookStore-CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
  DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
  DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
  CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
  CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
  CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_USER: ${{ secrets.DATABASE_USER }}
  DATABASE_USER_PASSWORD: ${{ secrets.DATABASE_USER_PASSWORD }}

jobs:
  linting-and-formatting:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api

    steps:
      - name: Checkout of the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create and activate virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/development.txt

      - name: Check formatting with Black
        run: black --check --diff .

      - name: Linting with Flake8
        run: flake8 .

  testing:
    needs: linting-and-formatting

    name: Testing
    runs-on: ubuntu-latest

    steps:
        - name: Checkout of the repository
          uses: actions/checkout@v4

        - uses: hoverkraft-tech/compose-action@v2.0.1
          with:
            compose-file: "testing.yaml"
        
        - name: Execute tests in the running services
          run: |
            docker compose -f testing.yaml exec api pytest

        - name: Display container logs if tests fail
          if: failure()
          run: |
            docker compose -f testing.yaml logs